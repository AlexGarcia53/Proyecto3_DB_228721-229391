/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentación;

import dominio.Presencial;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.FabricaLogica;
import logica.ILogica;

/**
 * Clase que representa la pantalla de búsqueda.
 *
 * @author Equipo 3
 */
class FrmBusqueda extends javax.swing.JFrame {
    /**
     * Atributo de tipo FrmBusqueda.
     */
    private static FrmBusqueda frmBusqueda;
    /**
     * Atributo de ILogica.
     */
    private ILogica logica;

    /**
     * Constructor que inicializa los componentes del formulario.
     */
    private FrmBusqueda() {
        initComponents();
        logica = FabricaLogica.crearLogica();
    }

    /**
     * Método utilizado para obtener al atributo de FrmBusqueda inicializado.
     *
     * @return Atributo frmBusqueda.
     */
    public static FrmBusqueda obtenerFrmBusqueda() {
        if (frmBusqueda == null) {
            frmBusqueda = new FrmBusqueda();
        }
        return frmBusqueda;
    }

    /**
     * Método que hace visible el formulario.
     */
    public void mostrarFormulario() {
        this.limpiarCampos();
        this.setVisible(true);
    }

    /**
     * Método que muestra advertencia.
     *
     * @param mensaje mensaje a advertir.
     */
    private void mostrarAdvertencia(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Advertencia!...", JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Método que muestra mensaje de no resultados.
     */
    private void mostrarMensajeNoResultados() {
        JOptionPane.showMessageDialog(this, "No se encontraron resultados", "Advertencia!...", JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Método que llena la tabla de castings.
     *
     * @param listaCastings lista de castings para llenar la tabla.
     */
    private void llenarTablaCastings(List<Presencial> listaCastings) {
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tblCastings.getModel();
        modeloTabla.setRowCount(0);
        listaCastings.forEach(casting -> {
            Object[] fila = new Object[6];
            fila[0] = casting.getCodigoCasting();
            fila[1] = casting.getNombre();
            fila[2] = casting.getDescripcion();
            fila[3] = casting.getFechaContratacion();
            fila[4] = casting.getNoPersonas();
            fila[5] = casting.getClienteCasting().getCoste();
            modeloTabla.addRow(fila);
        });
    }

    /**
     * Método utilizado para limpiar los campos del formulario.
     */
    private void limpiarCampos() {
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tblCastings.getModel();
        modeloTabla.setRowCount(0);
        this.dtpFechaBusqueda.setText("");
        this.txtCodigo.setText("");
        this.txtNombre.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dtpFechaBusqueda = new com.github.lgooddatepicker.components.DatePicker();
        btnBuscar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCastings = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Formulario de búsqueda por fecha");

        jLabel1.setText("Fecha:");
        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        btnBuscar.setText("Buscar");
        btnBuscar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        tblCastings.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblCastings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Código Casting", "Nombre", "Descripción", "Fecha Contratación", "Número Personas", "Costo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCastings);

        jLabel2.setText("Búsqueda");
        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel3.setText("Código:");
        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtCodigo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        lblNombre.setText("Nombre:");
        lblNombre.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtNombre.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(116, 116, 116)
                        .addComponent(btnVolver))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtCodigo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(24, 24, 24)
                        .addComponent(dtpFechaBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombre)))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dtpFechaBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnVolver))
                .addGap(80, 80, 80))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Función del botón volver.
     *
     * @param evt evento al que escucha.
     */
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.limpiarCampos();
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed
    /**
     * Función del botón buscar.
     *
     * @param evt evento al que escucha.
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        LocalDate fecha = this.dtpFechaBusqueda.getDate();
        String codigo = this.txtCodigo.getText();
        String nombre = this.txtNombre.getText();

        if (fecha == null && codigo.equals("") && nombre.equals("")) {
            this.mostrarAdvertencia("Todos los campos están vacíos, por ende no se puede llevar a cabo la búsqueda");
        }

        if ((fecha != null) && !(codigo.equals("")) && !(nombre.equals(""))) {
            GregorianCalendar fechaTemporal = new GregorianCalendar(fecha.getYear(), (fecha.getMonthValue() - 1), fecha.getDayOfMonth(), 0, 0, 0);
            Date fechaBusqueda = new Date(fechaTemporal.getTimeInMillis());
            List<Presencial> listaCastings = logica.obtenerCastingFechaCodigoNombre(fechaBusqueda, codigo, nombre);
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        } else if ((fecha != null) && !(codigo.equals(""))) {
            GregorianCalendar fechaTemporal = new GregorianCalendar(fecha.getYear(), (fecha.getMonthValue() - 1), fecha.getDayOfMonth(), 0, 0, 0);
            Date fechaBusqueda = new Date(fechaTemporal.getTimeInMillis());
            List<Presencial> listaCastings = logica.obtenerCastingFechaCodigo(fechaBusqueda, codigo);
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        } else if ((fecha != null) && !(nombre.equals(""))) {
            GregorianCalendar fechaTemporal = new GregorianCalendar(fecha.getYear(), (fecha.getMonthValue() - 1), fecha.getDayOfMonth(), 0, 0, 0);
            Date fechaBusqueda = new Date(fechaTemporal.getTimeInMillis());
            List<Presencial> listaCastings = logica.obtenerCastingFechaNombre(fechaBusqueda, nombre);
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        } else if (!(codigo.equals("")) && !(nombre.equals(""))) {
            List<Presencial> listaCastings = logica.obtenerCastingCodigoNombre(codigo, nombre);
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        } else if (fecha != null) {
            GregorianCalendar fechaTemporal = new GregorianCalendar(fecha.getYear(), (fecha.getMonthValue() - 1), fecha.getDayOfMonth(), 0, 0, 0);
            Date fechaBusqueda = new Date(fechaTemporal.getTimeInMillis());
            List<Presencial> listaCastings = logica.obtenerCastingFecha(fechaBusqueda);
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        } else if (!(codigo.equals(""))) {
            List<Presencial> listaCastings = new ArrayList<>();
            Presencial casting = logica.obtenerCastingCodigo(codigo);
            if (casting != null) {
                listaCastings.add(casting);
            }
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        } else if (!(nombre.equals(""))) {
            List<Presencial> listaCastings = new ArrayList<>();
            Presencial casting = logica.obtenerCastingNombre(nombre);
            if (casting != null) {
                listaCastings.add(casting);
            }
            if (listaCastings.size() > 0) {
                this.llenarTablaCastings(listaCastings);
            } else {
                this.mostrarMensajeNoResultados();
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnVolver;
    private com.github.lgooddatepicker.components.DatePicker dtpFechaBusqueda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTable tblCastings;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
