/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentación;

import dominio.Actividad;
import Excepciones.ClienteExistenteException;
import Excepciones.DatosClienteErroneosException;
import dominio.Cliente;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import logica.FabricaLogica;
import logica.ILogica;
import org.bson.types.ObjectId;

/**
 * Clase que representa la pantalla de Cliente.
 *
 * @author Equipo 3
 */
public class FrmCliente extends javax.swing.JFrame {

    /**
     * Atributo de tipo ILogica.
     */
    private ILogica logica;
    /**
     * Atributo de tipo FrmCliente.
     */
    private static FrmCliente frmCliente;

    /**
     * Constructor que inicializa los componentes del formulario.
     */
    private FrmCliente() {
        initComponents();
        this.logica = FabricaLogica.crearLogica();
        this.llenarComboBoxActividad();
    }

    /**
     * Método utilizado para obtener al atributo de FrmCliente inicializado.
     *
     * @return Atributo frmCliente.
     */
    public static FrmCliente obtenerFrmCliente() {
        if (frmCliente == null) {
            frmCliente = new FrmCliente();
        }
        return frmCliente;
    }

    /**
     * Método que hace visible el formulario.
     */
    public void mostrarFormulario() {
        this.limpiarCampos();
        this.setVisible(true);
    }

    /**
     * Método para llenar el combobox de actividades del cliente.
     */
    private void llenarComboBoxActividad() {
        DefaultComboBoxModel modelo = (DefaultComboBoxModel) this.cboActividad.getModel();
        modelo.addElement(Actividad.Cine);
        modelo.addElement(Actividad.Moda);
        modelo.addElement(Actividad.Publicidad);
        this.cboActividad.setSelectedIndex(-1);
    }

    /**
     * Método de mostrar mensaje de confirmación.
     *
     * @param cliente cliente a obtener datos.
     */
    private void mostrarMensaje(Cliente cliente) {
        JOptionPane.showMessageDialog(this, "Código de Cliente: " + cliente.getCodigoCliente() + "\nNombre: " + cliente.getNombre() + "\nDireccion: " + cliente.getDireccion()
                + "\nTeléfono: " + cliente.getTelefono() + "\nPersona Contacto: " + cliente.getPersonaContacto() + "\nActividad: " + cliente.getActividad(),
                "Cliente registrado con éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Método para registrar a un cliente.
     */
    private void registrar() {
        String nombre = this.txtNombre.getText();
        String direccion = this.txtDireccion.getText();
        String telefono = this.txtTelefono.getText();
        String personaContacto = this.txtPersonaContacto.getText();
        Actividad actividad = (Actividad) this.cboActividad.getSelectedItem();
        Cliente cliente = new Cliente(nombre, direccion, telefono, personaContacto, actividad);
        try {
            cliente.verificarDatos();
        } catch (DatosClienteErroneosException dce) {
            this.mostrarError(dce.getMessage());
            return;
        }
        cliente.generarIdCliente();
        cliente.asignaCodigoCliente();
        try {
            logica.registrarCliente(cliente);
        } catch (ClienteExistenteException cee) {
            this.mostrarError(cee.getMessage());
            return;
        }
        this.mostrarMensaje(cliente);
        this.limpiarCampos();
    }

    /**
     * Método para mostrar mensaje de error.
     *
     * @param error Error a mostrar.
     */
    private void mostrarError(String error) {
        JOptionPane.showMessageDialog(this, error, "Error!...", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Método para limpiar los campos del formulario.
     */
    public void limpiarCampos() {
        this.txtNombre.setText("");
        this.txtDireccion.setText("");
        this.txtPersonaContacto.setText("");
        this.txtTelefono.setText("");
        this.cboActividad.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboActividad = new javax.swing.JComboBox<>();
        txtPersonaContacto = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de clientes");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Registro Cliente");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Dirección:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Persona Contacto:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Teléfono:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Actividad:");

        cboActividad.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cboActividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboActividadActionPerformed(evt);
            }
        });

        txtPersonaContacto.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPersonaContacto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPersonaContactoKeyTyped(evt);
            }
        });

        txtNombre.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtDireccion.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDireccionKeyTyped(evt);
            }
        });

        txtTelefono.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        btnRegistrar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDireccion)
                            .addComponent(txtNombre)
                            .addComponent(txtTelefono)
                            .addComponent(txtPersonaContacto)
                            .addComponent(cboActividad, 0, 271, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(btnRegistrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPersonaContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cboActividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistrar)
                    .addComponent(btnSalir))
                .addGap(42, 42, 42))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cboActividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboActividadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboActividadActionPerformed
    /**
     * Función del botón agregar fase.
     *
     * @param evt evento al que escucha.
     */
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        this.registrar();
    }//GEN-LAST:event_btnRegistrarActionPerformed
    /**
     * Función del botón salir.
     *
     * @param evt evento al que escucha.
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.limpiarCampos();
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed
    /**
     * Función del campo de texto teléfono.
     *
     * @param evt evento al que escucha.
     */
    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        if (this.txtTelefono.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped
    /**
     * Función del campo de texto nombre.
     *
     * @param evt evento al que escucha.
     */
    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if (this.txtNombre.getText().length() >= 40) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped
    /**
     * Función del campo de texto persona de contacto.
     *
     * @param evt evento al que escucha.
     */
    private void txtPersonaContactoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPersonaContactoKeyTyped
        if (this.txtPersonaContacto.getText().length() >= 40) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPersonaContactoKeyTyped
    /**
     * Función del campo de texto dirección.
     *
     * @param evt evento al que escucha.
     */
    private void txtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyTyped
        if (this.txtDireccion.getText().length() >= 100) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDireccionKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cboActividad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPersonaContacto;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

}
